plugins {
    //Compiles Java
    id 'java'
    //Adds an Executable Manifest
    id 'application'
    //Creates FatJars
	id 'com.github.johnrengelman.shadow' version '6.1.0'
	//Builds docker images
	id 'com.palantir.docker' version '0.25.0'
  }
  
mainClassName = 'net.romvoid.crashbot.Bot'
def ver = new Version(major: 3, minor: 1, revision: 0)
version ver.toString()

sourceCompatibility = 15
targetCompatibility = 15

configurations {
    compile
}

repositories {
	mavenCentral()
	jcenter()
	
    maven { url 'https://jitpack.io' }
	maven { url 'https://maven.romvoid.dev' }
	maven { url 'https://dl.bintray.com/natanbc/maven' }

}

dependencies {
	// Base
    implementation ('net.dv8tion:JDA:4.2.0_225'){
        transitive = true
        exclude module: 'opus-java'
    }
	implementation 'club.minnced:discord-webhooks:0.5.3'
	implementation 'com.jagrosh:jda-utilities:3.0.4'
	
	// CORE
    implementation 'io.github.classgraph:classgraph:4.8.98'
	implementation 'ch.qos.logback:logback-classic:1.2.3'
	implementation 'com.google.guava:guava:30.1-jre'
	
	// Database
	implementation 'com.rethinkdb:rethinkdb-driver:2.4.4'
	implementation 'redis.clients:jedis:3.4.1'
	
	// Utilities
	implementation 'commons-io:commons-io:2.7'
	implementation 'org.apache.commons:commons-lang3:3.11'
	implementation 'org.apache.httpcomponents:httpclient:4.5.12'
	implementation 'com.google.code.gson:gson:2.8.6'
	implementation 'org.slf4j:slf4j-api:1.7.30'
	implementation 'com.github.natanbc:usage-tracker:0.1.1'
	implementation 'org.jsoup:jsoup:1.13.1'
	compileOnly 'org.projectlombok:lombok:1.18.16'
	annotationProcessor 'org.projectlombok:lombok:1.18.16'
	testCompileOnly 'org.projectlombok:lombok:1.18.16'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.16'
}

docker {
    name "romvoid95/crashlogbot:$ver"
    tag "latest", "romvoid95/crashlogbot:latest"
    copySpec.from("assets").into("assets")
    buildArgs([
        version: ver.toString(),
        jattachVersion: "v1.5"
    ])
}

docker.dependsOn shadowJar as Task

task ci {
    dependsOn shadowJar
    dependsOn tasks.docker
}

def lint = [
        "auxiliaryclass",
        "cast",
        "classfile",
        "deprecation",
        "dep-ann",
        "divzero",
        "empty",
        "exports",
        "fallthrough",
        "finally",
        "module",
        "opens",
        "options",
        "overloads",
        "overrides",
        "path",
        //removed because of "No processor claimed any of these annotations: ..."
        //"processing",
        "rawtypes",
        "removal",
        "requires-automatic",
        "requires-transitive-automatic",
        "serial",
        "static",
        "try",
        "unchecked",
        "varargs",
        "preview"
]

import org.apache.tools.ant.filters.ReplaceTokens

def gitRevision() {
    def gitVersion = new ByteArrayOutputStream()
    exec {
        commandLine("git", "rev-parse", "--short", "HEAD")
        standardOutput = gitVersion
    }

    return gitVersion.toString().trim()
}

task sourcesForRelease(type: Copy) {
    from ('src/main/java') {
        include '**/CrashBotInfo.java'
        filter(ReplaceTokens, tokens: [
                version: ver.toString(),
                revision: gitRevision().toString()
        ])
    }
    into 'build/filteredSrc'

    includeEmptyDirs = false
}

task generateJavaSources(type: SourceTask) {
    def javaSources = sourceSets.main.allJava.filter {
        it.name != 'CrashBotInfo.java'
    }
    source = javaSources + sourcesForRelease.destinationDir

    dependsOn sourcesForRelease
}

compileJava {
    source = generateJavaSources.source
    classpath = sourceSets.main.compileClasspath
    //options.compilerArgs += ["-Xlint:${lint.join(",")}", "-Werror"]
    options.compilerArgs += ["-Xlint:${lint.join(",")}"]

    dependsOn generateJavaSources
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.incremental = true
}

build.dependsOn shadowJar

shadowJar {
    archiveClassifier.set(null)
    exclude 'module-info.class'
}

class Version {
    String major, minor, revision

    String toString() {
        "${major}.${minor}.${revision}"
    }
}